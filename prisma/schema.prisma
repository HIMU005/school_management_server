// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  GUARDIAN
}

enum Status {
  PRESENT
  ABSENT
  LATE
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PAID
  FAILED
  UNPAID
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique
  age       Int?
  photoURL  String
  password  String?
  phone     String?
  gender    Gender?
  dob       DateTime?
  role      Role      @default(STUDENT)
  createdAt DateTime  @default(now())
  lastLogIn DateTime  @default(now())
  teacher   Teacher?
  student   Student?
  guardian  Guardian?
  payments  Payment[] @relation("UserPayment")
}

model Teacher {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int      @unique
  position    String?
  passedFrom  String?
  joiningDate DateTime @default(now())
  classes     Class[]  @relation("TeacherClass")
}

model Student {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int          @unique
  class       Class?       @relation("ClassStudent", fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_id    Int?
  session     String?
  guardian    Guardian?
  attendances Attendance[] @relation("StudentAttendance")
  reportCards ReportCard[] @relation("StudentReport")
}

model Guardian {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    Int     @unique
  student    Student @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id Int     @unique
}

model Banner {
  id          Int    @id @default(autoincrement())
  bgImage     String
  buttonTitle String
  direction   String
}

model Class {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  teacher     Teacher?     @relation("TeacherClass", fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  teacher_id  Int?
  attendances Attendance[] @relation("ClassAttendance")
  students    Student[]    @relation("ClassStudent")
}

model Attendance {
  id         Int      @id @default(autoincrement())
  takingTime DateTime @default(now())
  status     Status   @default(ABSENT)
  student    Student? @relation("StudentAttendance", fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id Int?
  class      Class?   @relation("ClassAttendance", fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_id   Int?
}

model ReportCard {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  student    Student? @relation("StudentReport", fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id Int?
  grades     Grade[]  @relation("ReportCardGrade")
}

model Grade {
  id            Int         @id @default(autoincrement())
  subject       String
  score         Float?
  reportCard    ReportCard? @relation("ReportCardGrade", fields: [reportCard_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportCard_id Int?
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  paymentDate DateTime?
  status      PaymentStatus
  user        User?         @relation("UserPayment", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int?
}

//npx prisma migrate dev --name init
